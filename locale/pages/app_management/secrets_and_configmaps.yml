texts:
  en: >-
    {% panel style="success", title="Providing Feedback" %}

    **Provide feedback at the [survey](https://www.surveymonkey.com/r/CLQBQHR)**
  ja: __COPY__
---
texts:
  en: '{% panel style="info", title="TL;DR" %}'
  ja: __COPY__
---
texts:
  en: Generate Secrets from files and literals with `secretGenerator`
  ja: Secret は `secretGenerator` を使用してファイルとリテラルから生成します
---
texts:
  en: Generate ConfigMaps from files and literals with `configMapGenerator`
  ja: ConfigMap は `configMapGenerator` を使用してファイルとリテラルから生成します
---
texts:
  en: Rolling out changes to Secrets and ConfigMaps
  ja: Secret と ConfigMap に対して変更をロールアウトします
---
texts:
  en: Secrets and ConfigMaps
  ja: Secret と ConfigMap
---
texts:
  en: '{% panel style="info", title="Reference" %}'
  ja: __COPY__
---
texts:
  en: "[secretGenerators](../reference/kustomize.md#secretgenerator)"
  ja: __COPY__
---
texts:
  en: "[configMapGenerators](../reference/kustomize.md#configmapgenerator)"
  ja: __COPY__
---
texts:
  en: "[generatorOptions](../reference/kustomize.md#generatoroptions)"
  ja: __COPY__
---
texts:
  en: Motivation
  ja: 動機
---
texts:
  en: >-
    The source of truth for Secret and ConfigMap Resources typically resides

    somewhere else, such as a `.properties` file.  Apply offers native support

    for generating both Secrets and ConfigMaps from other sources such as files and

    literals.
  ja: Secret リソースと ConfigMap リソースの元ソースは通常、`.properties` ファイルなど他の場所に保管します。Apply は、Secret と ConfigMap をファイルやリテラルといった他のソースから生成する機能をサポートしています。
---
texts:
  en: >-
    Additionally, Secrets and ConfigMaps require rollouts to be performed

    differently than for most other Resources in order for the changes to be

    rolled out to Pods consuming them.
  ja: 加えて、Secret と ConfigMap はそれを使用する Pod に変更をロールアウトするために、他のほとんどのリソースとは違った方法でロールアウトを実行する必要があります。
---
texts:
  en: Generators
  ja: ジェネレータ
---
texts:
  en: >-
    Secret and ConfigMap Resources can be generated by adding `secretGenerator`

    or `configMapGenerator` entries to the `kustomization.yaml` file.
  ja: Secret リソースと ConfigMapリソースは、`secretGenerator` と `configMapGenerator` という項目を `kustomization.yaml` に追加することによって生成できます。
---
texts:
  en: >-
    **The generated Resources name's will have suffixes that change when their data

    changes.  See [Rollouts](#rollouts) for more on this.**
  ja: "**生成されたリソースの名前には接尾辞が付きますが、データが変更されると接尾辞も変更されます。詳細は [Rollouts](#rollouts) を確認してください。**"
---
texts:
  en: ConfigMaps From Files
  ja: ファイルによる ConfigMap
---
texts:
  en: >-
    ConfigMap Resources may be generated from files - such as a java `.properties` file.  To generate a ConfigMap

    Resource for a file, add an entry to `configMapGenerator` with the filename.
  ja: ConfigMap リソースは Java の `.properties` ファイルのようなファイルから生成されます。ConfigMap をファイルから生成するには、`configMapGenerator` の項目にファイル名を追加してください。
---
texts:
  en: "**Example:** Generate a ConfigMap with a data item containing the contents of a file."
  ja: "**例:** ファイルの内容を含むデータ項目を持った ConfigMap の生成"
---
texts:
  en: >-
    The ConfigMaps will have data values populated from the file contents.  The contents of each file will

    appear as a single data item in the ConfigMap keyed by the filename.
  ja: ConfigMap はファイルの内容から集められたデータ値を持ちます。各ファイルの内容は ConfigMap の中でファイル名をキーとした一つのデータとして現れます。
---
meta:
  outdated: true
texts:
  en: "**Input:** The kustomization.yaml file"
  ja: >-
    {% sample lang="yaml" %}

    **入力:** kustomization.yaml ファイル
---
texts:
  en: "**Applied:** The Resource that is Applied to the cluster"
  ja: "**適用:** クラスタに適用されるリソース"
---
texts:
  en: ConfigMaps From Literals
  ja: リテラルによる ConfigMap
---
texts:
  en: >-
    ConfigMap Resources may be generated from literal key-value pairs - such as `JAVA_HOME=/opt/java/jdk`.

    To generate a ConfigMap Resource from literal key-value pairs, add an entry to `configMapGenerator` with a

    list of `literals`.
  ja: ConfigMap リソースは `JAVA_HOME=/opt/java/jdk` のようなキーバリューのリテラルからも生成できます。キーバリューのリテラルから ConfigMap リソースを生成するには、`configMapGenerator` 項目を追加して、そこに `literals` のリストを定義してください。
---
texts:
  en: '{% panel style="info", title="Literal Syntax" %}'
  ja: '{% panel style="info", title="リテラルの構文" %}'
---
texts:
  en: The key/value are separated by a `=` sign (left side is the key)
  ja: キーとバリューは `=` 記号で分けられます (左側がキー)
---
texts:
  en: The value of each literal will appear as a data item in the ConfigMap keyed by its key.
  ja: 各リテラルの値は ConfigMap の中でキー名自体をキーとしたデータ項目として現れます。
---
texts:
  en: "**Example:** Create a ConfigMap with 2 data items generated from literals."
  ja: "**例:** リテラルによって生成された二つのデータ項目をもつ ConfigMap を生成"
---
texts:
  en: ConfigMaps From Environment Files
  ja: 環境ファイルによる ConfigMap
---
texts:
  en: >-
    ConfigMap Resources may be generated from key-value pairs much the same as using the literals option

    but taking the key-value pairs from an environment file. These generally end in `.env`.

    To generate a ConfigMap Resource from an environment file, add an entry to `configMapGenerator` with a

    single `env` entry, e.g. `env: config.env`.
  ja: "ConfigMap リソースをキーバリューから生成するにはリテラルを使うのが一つの選択肢ですが、環境ファイルのキーバリューからも生成できます。環境ファイルは一般に `.env` が末尾に付きます。環境ファイルから ConfigMap リソースを生成するには、`configMapGenerator` という項目を加え、そこに `env` 項目 (たとえば `env: config.env`) を追加します。"
---
texts:
  en: '{% panel style="info", title="Environment File Syntax" %}'
  ja: '{% panel style="info", title="環境ファイルの構文" %}'
---
texts:
  en: The key/value pairs inside of the environment file are separated by a `=` sign (left side is the key)
  ja: 環境ファイルの中でキーバリューは `=` で区切られます (左側がキー)。
---
texts:
  en: The value of each line will appear as a data item in the ConfigMap keyed by its key.
  ja: 各行の値は ConfigMap の中でキー名自体をキーとしたデータ項目として現れます。
---
texts:
  en: "**Example:** Create a ConfigMap with 3 data items generated from an environment file."
  ja: "**例:** 環境ファイルによって生成された三つのデータをもつ ConfigMap を作成"
---
texts:
  en: >-
    {% panel style="success", title="Overriding Base ConfigMap Values" %}

    ConfigMaps Values from Bases may be overridden by adding another generator for the ConfigMap

    in the Variant and specifying the `behavior` field.  `behavior` may be

    one of `create` (default value), `replace` (replace the base ConfigMap),

    or `merge` (add or update the values the ConfigMap).  See [Bases and Variantions](../app_customization/bases_and_variants.md)

    for more on using Bases.  e.g. `behavior: "merge"`
  ja: >-
    {% panel style="success", title="ベースとなる ConfigMap の値の上書き" %}

    ベースから生成された ConfigMap は Variant に別の ConfigMap ジェネレータを追加し、`behavior` フィールドを指定することで上書きできます。`behavior` は、`create` (デフォルト値)、`replace` (ベースの ConfigMap を置換)、`merge` (ConfigMap の値を追加または更新)のうちどれか一つの値を取ります (たとえば、`behavior: "merge"`)。ベースの詳しい使い方は [Bases and Variantions](../app_customization/bases_and_variants.md) 参照。
---
texts:
  en: Secrets from Files
  ja: ファイルによる Secret
---
texts:
  en: >-
    Secret Resources may be generated much like ConfigMaps can. This includes generating them

    from literals, files or environment files.
  ja: Secret リソースは ConfigMap とほぼ同じように生成できます。リテラル、ファイル、環境ファイルから生成できます。
---
texts:
  en: >-
    {% panel style="info", title="Secret Syntax" %}

    Secret type is set using the `type` field.
  ja: >-
    {% panel style="info", title="Secret の構文" %}

    Secret のタイプは `type` フィールドを使って設定します。
---
texts:
  en: "**Example:** Generate a `kubernetes.io/tls` Secret from local files"
  ja: "**例:** ローカルのファイルから `kubernetes.io/tls` という Secret を生成"
---
texts:
  en: Generator Options
  ja: ジェネレータのオプション
---
texts:
  en: >-
    It is also possible to specify cross-cutting options for generated objects

    using  `generatorOptions`.
  ja: "`generatorOptions` を使って、生成されるオブジェクトに対して横断的にオプションを指定することもできます。"
---
texts:
  en: Propagating the Name Suffix
  ja: 名前の接尾辞の伝達
---
texts:
  en: >-
    Workloads that reference the ConfigMap or Secret will need to know the name of the generated Resource

    including the suffix, however Apply takes care of this automatically for users.  Apply will identify

    references to generated ConfigMaps and Secrets, and update them.
  ja: ConfigMap と Secret を参照するワークロードは、生成されたリソースの名前を知る必要がありますが、その名前には接尾辞が含まれています。けれども、Apply はこれを自動的に処理してくれます。Apply は生成された ConfigMap と Secret への参照を識別し、更新します。
---
texts:
  en: >-
    The generated ConfigMap name will be `my-java-server-env-vars` with a suffix unique to its contents.

    Changes to the contents will change the name suffix, resulting in the creation of a new ConfigMap,

    and transform Workloads to point to this one.
  ja: 生成された ConfigMap の名前は `my-java-server-env-vars` のような文字列に ConfigMap の内容に応じた一意な接尾辞が付きます。内容が変われば名前の接尾辞も変更されるため、新しい ConfigMap が作成さることになり、それを指すようにワークロードを作り変えます。
---
texts:
  en: >-
    The PodTemplate volume references the ConfigMap by the name specified in the generator (excluding the suffix).

    Apply will update the name to include the suffix applied to the ConfigMap name.
  ja: PodTemplate volume は ConfigMap をジェネレータの中で指定された名前 (接尾辞を除いた名前) で参照します。Apply は ConfigMap の名前に適用された、接尾辞を含む名前に更新します。
---
texts:
  en: "**Input:** The kustomization.yaml and deployment.yaml files"
  ja: >-
    **入力:** kustomization.yaml ファイルと deployment.yaml ファイル
---
texts:
  en: "**Applied:** The Resources that are Applied to the cluster."
  ja: "**適用:** クラスタに適用されるリソース"
---
texts:
  en: Rollouts
  ja: ロールアウト
---
texts:
  en: "ConfigMap values are consumed by Pods as: environment variables, command line arguments and files."
  ja: ConfigMap の値は Pod が環境変数、コマンドライン引数、またファイルとして使用します。
---
texts:
  en: "This is important because Updating a ConfigMap will:"
  ja: これらの区別は ConfigMap の変更が以下を伴うため、重要です。
---
texts:
  en: immediately update the files mounted by *all* Pods consuming them
  ja: ConfigMap を変更するとそれを使用する**すべての** Pod によってマウントされているファイルが直ちに更新される
---
texts:
  en: not update the environment variables or command line arguments until the Pod is restarted
  ja: Pod が再起動されるまで、環境変数やコマンドライン引数は更新されない
---
texts:
  en: >-
    Typically users want to perform a rolling update of the ConfigMap changes to Pods as soon as

    the ConfigMap changes are pushed.
  ja: 通常、ConfigMap の変更がプッシュされたら、すぐに Pod に対する ConfigMap の変更をローリングアップデートしたくなります。
---
texts:
  en: >-
    Apply facilitates rolling updates for ConfigMaps by creating a new ConfigMap

    for each change to the data.  Workloads (e.g. Deployments, StatefulSets, etc) are updated to point to a new

    ConfigMap instead of the old one.  This allows the change to be gradually rolled the same way

    other Pod Template changes are rolled out.
  ja: Apply はデータが更新されるたびに新しく ConfigMap を作成するため、ConfigMap のローリングアップデートは容易です。ワークロード (たとえば Deployment、StatefulSet など) は古い ConfigMap から新しい ConfigMap を指すように更新されます。これによって変更を少しずつ反映させることが可能になりますが、他の Pod Template の変更をロールアウトするときにも同様のやり方が使われています。
---
texts:
  en: >-
    Each generated Resources name has a suffix appended by hashing the contents.  This approach ensures a new

    ConfigMap is generated each time the contents is modified.
  ja: 生成された各リソースの名前にはその内容をハッシュ化した接尾辞が付きます。この方法は、ConfigMap の内容が修正されるたびに新しい ConfigMap が生成されることを保証します。
---
texts:
  en: >-
    **Note:** Because the Resource names will contain a suffix, when looking for them with `kubectl get`,

    their names will not match exactly what is specified in the kustomization.yaml file.
  ja: "注意: リソース名は接尾辞を含むため、`kubectl get` でリソースを探すときに、リソース名は kustomization.yaml ファイルの中で指定した名前と厳密に一致しません。"
