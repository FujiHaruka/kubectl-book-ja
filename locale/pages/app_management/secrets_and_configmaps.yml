texts:
  en: >-
    {% panel style="success", title="Providing Feedback" %}

    **Provide feedback at the [survey](https://www.surveymonkey.com/r/CLQBQHR)**

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: '{% panel style="info", title="TL;DR" %}'
  ja: __COPY__
---
texts:
  en: Generate Secrets from files and literals with `secretGenerator`
  ja: __COPY__
---
texts:
  en: Generate ConfigMaps from files and literals with `configMapGenerator`
  ja: __COPY__
---
texts:
  en: >-
    Rolling out changes to Secrets and ConfigMaps

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: Secrets and ConfigMaps
  ja: __COPY__
---
texts:
  en: '{% panel style="info", title="Reference" %}'
  ja: __COPY__
---
texts:
  en: "[secretGenerators](../reference/kustomize.md#secretgenerator)"
  ja: __COPY__
---
texts:
  en: "[configMapGenerators](../reference/kustomize.md#configmapgenerator)"
  ja: __COPY__
---
texts:
  en: >-
    [generatorOptions](../reference/kustomize.md#generatoroptions)

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: Motivation
  ja: __COPY__
---
texts:
  en: >-
    The source of truth for Secret and ConfigMap Resources typically resides

    somewhere else, such as a `.properties` file.  Apply offers native support

    for generating both Secrets and ConfigMaps from other sources such as files and

    literals.
  ja: __COPY__
---
texts:
  en: >-
    Additionally, Secrets and ConfigMaps require rollouts to be performed

    differently than for most other Resources in order for the changes to be

    rolled out to Pods consuming them.
  ja: __COPY__
---
texts:
  en: Generators
  ja: __COPY__
---
texts:
  en: >-
    Secret and ConfigMap Resources can be generated by adding `secretGenerator`

    or `configMapGenerator` entries to the `kustomization.yaml` file.
  ja: __COPY__
---
texts:
  en: >-
    **The generated Resources name's will have suffixes that change when their data

    changes.  See [Rollouts](#rollouts) for more on this.**
  ja: __COPY__
---
texts:
  en: ConfigMaps From Files
  ja: __COPY__
---
texts:
  en: >-
    {% method %}

    ConfigMap Resources may be generated from files - such as a java `.properties` file.  To generate a ConfigMap

    Resource for a file, add an entry to `configMapGenerator` with the filename.
  ja: __COPY__
---
texts:
  en: "**Example:** Generate a ConfigMap with a data item containing the contents of a file."
  ja: __COPY__
---
texts:
  en: >-
    The ConfigMaps will have data values populated from the file contents.  The contents of each file will

    appear as a single data item in the ConfigMap keyed by the filename.
  ja: __COPY__
---
texts:
  en: >-
    {% sample lang="yaml" %}

    **Input:** The kustomization.yaml file
  ja: __COPY__
---
texts:
  en: "**Applied:** The Resource that is Applied to the cluster"
  ja: __COPY__
---
texts:
  en: "{% endmethod %}"
  ja: __COPY__
---
texts:
  en: ConfigMaps From Literals
  ja: __COPY__
---
texts:
  en: >-
    ConfigMap Resources may be generated from literal key-value pairs - such as `JAVA_HOME=/opt/java/jdk`.

    To generate a ConfigMap Resource from literal key-value pairs, add an entry to `configMapGenerator` with a

    list of `literals`.
  ja: __COPY__
---
texts:
  en: '{% panel style="info", title="Literal Syntax" %}'
  ja: __COPY__
---
texts:
  en: The key/value are separated by a `=` sign (left side is the key)
  ja: __COPY__
---
texts:
  en: >-
    The value of each literal will appear as a data item in the ConfigMap keyed by its key.

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: >-
    {% method %}

    **Example:** Create a ConfigMap with 2 data items generated from literals.
  ja: __COPY__
---
texts:
  en: ConfigMaps From Environment Files
  ja: __COPY__
---
texts:
  en: >-
    ConfigMap Resources may be generated from key-value pairs much the same as using the literals option

    but taking the key-value pairs from an environment file. These generally end in `.env`.

    To generate a ConfigMap Resource from an environment file, add an entry to `configMapGenerator` with a

    single `env` entry, e.g. `env: config.env`.
  ja: __COPY__
---
texts:
  en: '{% panel style="info", title="Environment File Syntax" %}'
  ja: __COPY__
---
texts:
  en: The key/value pairs inside of the environment file are separated by a `=` sign (left side is the key)
  ja: __COPY__
---
texts:
  en: >-
    The value of each line will appear as a data item in the ConfigMap keyed by its key.

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: >-
    {% method %}

    **Example:** Create a ConfigMap with 3 data items generated from an environment file.
  ja: __COPY__
---
texts:
  en: >-
    {% panel style="success", title="Overriding Base ConfigMap Values" %}

    ConfigMaps Values from Bases may be overridden by adding another generator for the ConfigMap

    in the Variant and specifying the `behavior` field.  `behavior` may be

    one of `create` (default value), `replace` (replace the base ConfigMap),

    or `merge` (add or update the values the ConfigMap).  See [Bases and Variantions](../app_customization/bases_and_variants.md)

    for more on using Bases.  e.g. `behavior: "merge"`

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: Secrets from Files
  ja: __COPY__
---
texts:
  en: >-
    Secret Resources may be generated much like ConfigMaps can. This includes generating them

    from literals, files or environment files.
  ja: __COPY__
---
texts:
  en: >-
    {% panel style="info", title="Secret Syntax" %}

    Secret type is set using the `type` field.

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: >-
    {% method %}

    **Example:** Generate a `kubernetes.io/tls` Secret from local files
  ja: __COPY__
---
texts:
  en: Generator Options
  ja: __COPY__
---
texts:
  en: >-
    {% method %}

    It is also possible to specify cross-cutting options for generated objects

    using  `generatorOptions`.
  ja: __COPY__
---
texts:
  en: '{% sample lang="yaml" %}'
  ja: __COPY__
---
texts:
  en: Propagating the Name Suffix
  ja: __COPY__
---
texts:
  en: >-
    {% method %}

    Workloads that reference the ConfigMap or Secret will need to know the name of the generated Resource

    including the suffix, however Apply takes care of this automatically for users.  Apply will identify

    references to generated ConfigMaps and Secrets, and update them.
  ja: __COPY__
---
texts:
  en: >-
    The generated ConfigMap name will be `my-java-server-env-vars` with a suffix unique to its contents.

    Changes to the contents will change the name suffix, resulting in the creation of a new ConfigMap,

    and transform Workloads to point to this one.
  ja: __COPY__
---
texts:
  en: >-
    The PodTemplate volume references the ConfigMap by the name specified in the generator (excluding the suffix).

    Apply will update the name to include the suffix applied to the ConfigMap name.
  ja: __COPY__
---
texts:
  en: >-
    {% sample lang="yaml" %}

    **Input:** The kustomization.yaml and deployment.yaml files
  ja: __COPY__
---
texts:
  en: "**Applied:** The Resources that are Applied to the cluster."
  ja: __COPY__
---
texts:
  en: Rollouts
  ja: __COPY__
---
texts:
  en: "ConfigMap values are consumed by Pods as: environment variables, command line arguments and files."
  ja: __COPY__
---
texts:
  en: "This is important because Updating a ConfigMap will:"
  ja: __COPY__
---
texts:
  en: immediately update the files mounted by *all* Pods consuming them
  ja: __COPY__
---
texts:
  en: not update the environment variables or command line arguments until the Pod is restarted
  ja: __COPY__
---
texts:
  en: >-
    Typically users want to perform a rolling update of the ConfigMap changes to Pods as soon as

    the ConfigMap changes are pushed.
  ja: __COPY__
---
texts:
  en: >-
    Apply facilitates rolling updates for ConfigMaps by creating a new ConfigMap

    for each change to the data.  Workloads (e.g. Deployments, StatefulSets, etc) are updated to point to a new

    ConfigMap instead of the old one.  This allows the change to be gradually rolled the same way

    other Pod Template changes are rolled out.
  ja: __COPY__
---
texts:
  en: >-
    Each generated Resources name has a suffix appended by hashing the contents.  This approach ensures a new

    ConfigMap is generated each time the contents is modified.
  ja: __COPY__
---
texts:
  en: >-
    **Note:** Because the Resource names will contain a suffix, when looking for them with `kubectl get`,

    their names will not match exactly what is specified in the kustomization.yaml file.
  ja: __COPY__
