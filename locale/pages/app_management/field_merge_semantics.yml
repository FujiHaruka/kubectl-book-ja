texts:
  en: >-
    {% panel style="success", title="Providing Feedback" %}

    **Provide feedback at the [survey](https://www.surveymonkey.com/r/CLQBQHR)**
  ja: __COPY__
---
texts:
  en: '{% panel style="info", title="TL;DR" %}'
  ja: __COPY__
---
texts:
  en: Fields set and deleted from Resource Config are merged into Resources by Apply
  ja: リソース設定から追加また削除されたフィールドは Apply を実行することでリソースにマージされる
---
texts:
  en: If a Resource already exists, Apply updates the Resources by merging the local Resource Config into the remote Resources
  ja: すでにリソースが存在していれば、Apply を実行するとリソースが更新され、ローカルにあるリソース設定がリモートのリソースにマージされる
---
texts:
  en: Fields removed from the Resource Config will be deleted from the remote Resource
  ja: リソース設定から除かれたフィールドは、リモートのリソースから削除される
---
texts:
  en: Merging Fields
  ja: フィールドのマージ
---
texts:
  en: >-
    {% panel style="warning", title="Advanced Section" %}

    This chapter contains advanced material that readers may want to skip and come back to later.
  ja: >-
    {% panel style="warning", title="高度な内容" %}

    この章には高度な内容が含まれるため、読み飛ばして後から戻っても構いません。
---
texts:
  en: When are fields merged?
  ja: フィールドはマージされるのはいつか？
---
texts:
  en: >-
    This page describes how Resource Config is merged with Resources or other Resource Config.  This

    may occur when:
  ja: このページでは、リソース設定がどのようにリソースとマージされるか、あるいはどのように他のリソース設定とマージされるかを説明します。マージされるタイミングは以下です。
---
texts:
  en: "Applying Resource Config updates to the live Resources in the cluster "
  ja: リソース設定の更新をクラスタ内で稼働中のリソースに適用する
---
texts:
  en: Defining Patches in the `kustomization.yaml` which are overlayed on `resources` and [bases](../app_customization/bases_and_variants.md)
  ja: "`kustomization.yaml` の中で `resources` および [bases](../app_customization/bases_and_variants.md) 上にパッチを定義する"
---
texts:
  en: Applying Resource Config Updates
  ja: リソース設定の更新を適用する
---
texts:
  en: >-
    Rather than replacing the Resource with the new Resource Config, **Apply will merge the new Resource Config

    into the live Resource**.  This retains values which may be set by the control plane - such as `replicas` values

    set by auto scalers
  ja: Apply は新しいリソース設定を使ってリソースを置換するのではなく、**新しいリソース設定を稼働中のリソースにマージします**。そのために制御プレーンによって設定されうる値、たとえば autoscaler により設定される `replicas` の値などを保持します。
---
texts:
  en: Defining Patches
  ja: パッチを定義する
---
texts:
  en: >-
    `patches` are sparse Resource Config which **contain a subset of fields that override values

    defined in other Resource Config** with the same Group/Version/Kind/Namespace/Name.

    This is used to alter values defined on Resource Config without having to fork it.
  ja: "`patches` は疎なリソース設定で、**他のリソース設定の中で定義された値を上書きするフィールドのサブセットを含みます**。上書き対象となるリソースは、同じグループ / バージョン / Kind / 名前空間をもつものです。これはリソース設定をフォークせずに、リソース設定で定義された値を変更するために使用されます。"
---
texts:
  en: Motivation (Apply)
  ja: 動機 (Apply)
---
texts:
  en: This page describes the semantics for merging Resource Config.
  ja: このページではリソース設定をマージするための意味論を説明します。
---
texts:
  en: >-
    Ownership of Resource fields are shared between declarative Resource Config authored by human

    users, and values set by Controllers running in the cluster.  Some fields, such as the `status`

    and `clusterIp` fields, are owned exclusively by Controllers.  Fields, such as the `name`

    and `namespace` fields, are owned exclusively by the human user managing the Resource.
  ja: リソースフィールドの所有権は、人間の手で書かれた宣言的なリソース設定と、クラスタ内で実行されるコントローラが設定した値との間で共有されます。`status` や `clusterIp` のようないくつかのフィールドは、コントローラが排他的に所有します。`namespace` などのフィールドは、リソースを管理する人間が排他的に所有します。
---
texts:
  en: >-
    Other fields, such as `replicas`, may be owned by either human users, the apiserver or

    Controllers.  For example, `replicas` may be explicitly set by a user, implicitly set

    to a default value by the apiserver, or continuously adjusted by a Controller such as

    and HorizontalPodAutoscaler.
  ja: "`replicas` のような他のフィールドは、人間が所有することもありますし、apiserver やコントローラが所有することもあります。たとえば、`replicas` はユーザーが排他的に設定することもできますが、apiserver が暗黙的にデフォルト値を設定することもあり、あるいは HorizontalPodAutoscaler のようなコントローラが継続的に調整することもあります。"
---
texts:
  en: Last Applied Resource Config
  ja: 前回適用されたリソース設定
---
texts:
  en: >-
    When Apply creates or updates a Resource, it writes the Resource Config it Applied to an annotation on the

    Resource.  This allows it to compare the last Resource Config it Applied to the current Resource

    Config and identify fields that have been deleted.
  ja: Apply はリソースを作成または更新するときに、適用されたリソース設定をリソース上のアノテーションに書き込みます。これによって前回適用されたリソース設定と今回のリソース設定を比較することができ、削除されたフィールドを特定できます。
---
texts:
  en: Merging Resources
  ja: リソースをマージする
---
texts:
  en: "Following are the merge semantics for Resources:"
  ja: 以下はリソースをマージするときの意味論です。
---
texts:
  en: "**Adding Fields:**"
  ja: フィールドの追加
---
texts:
  en: >-
    Fields present in the Resource Config that are missing from the Resource will be added to the
      Resource.
  ja: リソース設定に存在しているがリソースに欠落しているフィールドは、リソースに追加される
---
texts:
  en: Fields will be added to the Last Applied Resource Config
  ja: フィールドは前回適用されたリソース設定に追加される
---
texts:
  en: "**Updating Fields**"
  ja: "**フィールドの更新**"
---
texts:
  en: >-
    Fields present in the Resource Config that are also present in the Resource will be merged recursively
      until a primitive field is updated, or a field is added / deleted.
  ja: リソース設定にもリソースにも存在しているフィールドは、再帰的にマージされ、末端のプリミティブ値のフィールドが更新されるか、またはフィールドが追加 / 削除される
---
texts:
  en: Fields will be updated in the Last Applied Resource Config
  ja: フィールドは前回適用されたリソース設定の中で更新される
---
texts:
  en: "**Deleting Fields**"
  ja: "**フィールドの削除**"
---
texts:
  en: >-
    Fields present in the **Last Applied Resource Config** that have been removed from the Resource Config
      will be deleted from the Resource.
  ja: "**前回適用されたリソース設定**に存在するが現在のリソース設定で除かれたフィールドは、リソースから削除される"
---
texts:
  en: >-
    Fields set to *null* in the Resource Config that are present in the Resource Config will be deleted from the
      Resource.
  ja: リソース設定で **null** 値で存在しているフィールドはリソースから削除される
---
texts:
  en: Fields will be removed from the Last Applied Resource Config
  ja: フィールドは前回適用されたリソース設定から除かれる
---
texts:
  en: >-
    {% panel style="danger", title="Removing Fields from Resource Config" %}

    Simply removing a field from the Resource Config will *not* transfer the ownership to the cluster.

    Instead it will delete the field from the Resource.  If a field is set in the Resource Config and

    the user wants to give up ownership (e.g. removing `replicas` from the Resource Config and using

    and autoscaler), the user must first remove it from the last Applied Resource Config stored by the

    cluster.
  ja: >-
    {% panel style="danger", title="リソース設定からフィールドを削除する" %}

    リソース設定から単にフィールドを除くだけでは所有権がクラスタに移ることは**ありません**。そうではなくリソースからフィールドを削除します。もしフィールドがリソース設定の中に設定され、ユーザーが所有権を放棄したい (たとえば `replicas` をリソース設定から除いて autoscaler に頼る) と思ったら、最初に、クラスタに保存されている前回適用されたリソース設定からフィールドを削除しなければなりません。
---
texts:
  en: >-
    This can be performed using `kubectl apply edit-last-applied` to delete the `replicas` field from

    the **Last Applied Resource Config**, and then deleting it from the **Resource Config.**
  ja: これを実行するには、`kubectl apply edit-last-applied` コマンドを使い、**前回適用されたリソース設定**から `replicas` を削除し、次に**リソース設定**からも削除します。
---
texts:
  en: Field Merge Semantics
  ja: フィールドのマージの意味論
---
texts:
  en: Merging Primitives
  ja: プリミティブ値のマージ
---
texts:
  en: Primitive fields are merged by replacing the current value with the new value.
  ja: プリミティブ値のフィールドは現在の値を新しい値に置換することでマージします。
---
texts:
  en: "**Field Creation:** Add the primitive field"
  ja: "**フィールドの作成:** プリミティブ値のフィールドを追加"
---
texts:
  en: "**Field Update:** Change the primitive field value"
  ja: "**フィールドの更新:** プリミティブ値のフィールドの値を変更"
---
texts:
  en: "**Field Deletion:** Delete the primitive field"
  ja: "**フィールドの削除:** プリミティブ値のフィールドを削除"
---
texts:
  en: Field in Resource Config
  ja: リソース設定内のフィールド
---
texts:
  en: Field in Resource
  ja: リソース内のフィールド
---
texts:
  en: Field in Last Applied
  ja: 前回適用されたフィールド
---
texts:
  en: Action
  ja: アクション
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Set live to the Resource Config value.
  ja: 稼働中のリソースにリソース設定の値をセット
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Set live to the Resource Config value.
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: Remove from Resource.
  ja: リソースから削除
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: Do nothing.
  ja: 何もしない
---
texts:
  en: Merging Objects
  ja: オブジェクトのマージ
---
texts:
  en: >-
    Objects fields are updated by merging the sub-fields recursively (by field name) until a primitive field is found or

    the field is added / deleted.
  ja: オブジェクトのフィールドは下位のフィールドを (フィールド名で) 再帰的にマージすることによって更新します。マージは末端でプリミティブ値のフィールドが見つかるか、フィールドを追加 / 削除するまで続きます。
---
texts:
  en: "**Field Creation:** Add the object field"
  ja: "**フィールドの作成:** オブジェクトのフィールドを追加"
---
texts:
  en: "**Field Update:** Recursively compare object sub-field values and merge them"
  ja: "**フィールドの更新:** 再帰的にオブジェクトの下位のフィールドを見て値を比較し、マージする"
---
texts:
  en: "**Field Deletion:** Delete the object field"
  ja: "**フィールドの削除:** オブジェクトのフィールドを削除"
---
texts:
  en: "**Merge Table:** For each field merge Resource Config and Resource values with the same name"
  ja: "**テーブルのマージ:** 各フィールドに対してリソース設定と同名のリソースの値をマージ"
---
texts:
  en: Field in Resource Config
  ja: __COPY__
---
texts:
  en: Field in Resource
  ja: __COPY__
---
texts:
  en: Field in Last Applied
  ja: __COPY__
---
texts:
  en: Action
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Recursively merge the Resource Config and Resource values.
  ja: 再帰的にリソース設定とリソースの値をマージする
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Set live to the Resource Config value.
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: Remove field from Resource.
  ja: リソースからフィールドを削除する
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: Do nothing.
  ja: __COPY__
---
texts:
  en: Merging Maps
  ja: マップのマージ
---
texts:
  en: >-
    Map fields are updated by merging the elements (by key) until a primitive field is found or the value is

    added / deleted.
  ja: マップフィールドは要素を (キーで) マージします。マージは末端でプリミティブ値のフィールドが見つかるか、値が追加 / 削除されるまで続きます。
---
texts:
  en: "**Field Creation:** Add the map field"
  ja: "**フィールドの削除:** マップフィールドを追加"
---
texts:
  en: "**Field Update:** Recursively compare map values by key and merge them"
  ja: "**フィールドの更新:** 再帰的にマップの値をキーで比較し、マージする"
---
texts:
  en: "**Field Deletion:** Delete the map field"
  ja: "**フィールドの削除:** マップフィールドを削除"
---
texts:
  en: "**Merge Table:** For each map element merge Resource Config and Resource values with the same key"
  ja: "**テーブルのマージ:** 各マップの要素に対してリソース設定と同キーのリソースの値をマージ"
---
texts:
  en: Key in Resource Config
  ja: リソース設定内のキー
---
texts:
  en: Key   in Resource
  ja: リソース内のキー
---
texts:
  en: Key in Last Applied
  ja: 前回適用されたリソース設定内のキー
---
texts:
  en: Action
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Recursively merge the Resource Config and Resource values.
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Set live to the Resource Config value.
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: Remove map element from Resource.
  ja: リソースから要素を削除
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: Do nothing.
  ja: __COPY__
---
texts:
  en: Merging Lists of Primitives
  ja: プリミティブ値のリストのマージ
---
texts:
  en: >-
    Lists of primitives will be merged if they have a `patch strategy: merge` on the field otherwise they will

    be replaced.  [Finalizer list example](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#objectmeta-v1-meta)
  ja: "プリミティブ値のリストは、フィールドに `patch strategy: merge` が設定されていればマージされ、そうでなければ置換されます。 [Finalizer list example](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#objectmeta-v1-meta)"
---
texts:
  en: "**Merge Strategy:**"
  ja: "**マージ戦略**"
---
texts:
  en: Merged primitive lists behave like ordered sets
  ja: プリミティブ値のリストのマージは ordered set の挙動と似ています
---
texts:
  en: Replace primitive lists are replaced when merged
  ja: プリミティブ値のリストの置換はマージ時に置換されます
---
texts:
  en: >-
    **Ordering:** Uses the ordering specified in the Resource Config.  Elements not specified in the Resource Config

    do not have ordering guarantees with respect to the elements in the Resource Config.
  ja: "**順序付け:** リソース設定の中で定義された順序を使用します。リソース設定に定義されていない要素は、リソース設定内の要素に関して順序の保証はありません。"
---
texts:
  en: "**Merge Table:** For each list element merge Resource Config and Resource element with the same value"
  ja: "**マージテーブル:** 各リストの要素はリソース設定とリソースの要素を同じ値でマージします"
---
texts:
  en: Element in Resource Config
  ja: リソース設定の要素
---
texts:
  en: Element in Resource
  ja: リソースの要素
---
texts:
  en: Element in Last Applied
  ja: 前回適用されたリソース設定の要素
---
texts:
  en: Action
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Do nothing
  ja: 何もしない
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Add to list.
  ja: リストに追加する
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: Remove from list.
  ja: リストから除く
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: Do nothing.
  ja: __COPY__
---
texts:
  en: >-
    This merge strategy uses the patch merge key to identify container elements in a list and merge them.

    The `patch merge key` is defined in the [Kubernetes API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#podspec-v1-core)

    on the field.
  ja: このマージ戦略は patch merge key を使ってリスト内のコンテナ要素を識別し、マージします。`patch merge key` はフィールド上の [Kubernetes API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#podspec-v1-core) で定義されています。
---
texts:
  en: Merging Lists of Objects
  ja: オブジェクトのリストのマージ
---
texts:
  en: >-
    **Merge Strategy:** Lists of primitives may be merged or replaced.  Lists are merged if the list has a `patch strategy` of *merge*

    and a `patch merge key` on the list field.  [Container list example](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#podspec-v1-core).
  ja: "**マージ戦略:** プリミティブ値のリストはマージされるか置換されるかします。リストの `patch strategy` が **merge** でリストフィールドに `patch merge key` があるとき、リストはマージされます。 [Container list example](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#podspec-v1-core)"
---
texts:
  en: >-
    **Merge Key:** The `patch merge key` is used to identify same elements in a list.  Unlike map elements (keyed by key) and object fields

    (keyed by field name), lists don't have a built-in merge identity for elements (index does not define identity).

    Instead an object field is used as a synthetic *key/value* for merging elements.  This fields is the

    `patch merge key`.  List elements with the same patch merge key will be merged when lists are merged.
  ja: "**マージキー:** `patch merge key` はリスト内の同じ要素を識別するために使用されます。 map の要素 (キーによるキー) やオブジェクトのフィールド (フィールド名によるキー) と違って、リストは各要素を区別するビルトインの識別子がありません (インデックスは同一性を定義しません)。オブジェクトのフィールドの代わりに、マージする要素に対して人工のキー / バリューとして使われます。このフィールドは `patch merge key` です。同じ patch merge key をもつ要素はリストがマージされるときにマージされます。"
---
texts:
  en: >-
    **Ordering:** Uses the ordering specified in the Resource Config.  Elements not specified in the Resource Config

    do not have ordering guarantees.
  ja: "**順序:** リソース設定の中で定義された順序を使用します。リソース設定の中で定義されていない要素は順序が保証されません。"
---
texts:
  en: >-
    **Merge Table:** For each list element merge Resource Config and Resource element where the elements have the same

    value for the `patch merge key`
  ja: "**マージテーブル:** 各リストの要素に対してリソース設定とリソースの要素をマージしますが、`patch merge key` の値が同じ要素をマージします。"
---
texts:
  en: Element in Resource Config
  ja: __COPY__
---
texts:
  en: Element in Resource
  ja: __COPY__
---
texts:
  en: Element in Last Applied
  ja: __COPY__
---
texts:
  en: Action
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Recursively merge the Resource Config and Resource values.
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Add to list.
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: Remove from list.
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: Do nothing.
  ja: __COPY__
---
texts:
  en: >-
    This merge strategy uses the patch merge key to identify container elements in a list and merge them.

    The `patch merge key` is defined in the [Kubernetes API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#podspec-v1-core)

    on the field.
  ja: __COPY__
---
texts:
  en: >-
    {% panel style="info", title="Edit and Set" %}

    While `kubectl edit` and `kubectl set` ignore the Last Applied Resource Config, Apply will

    change any values in the Resource Config set by either `kubectl edit` or `kubectl set`.

    To ignore values set by `kubectl edit` or `kubectl set`:
  ja: >-
    {% panel style="info", title="Edit と Set" %}

    `kubectl edit` と `kubectl set` は前回適用されたリソース設定を無視しますが、Apply は、`kubectl edit` や `kubectl set` でセットされたリソース設定の値を変更します。`kubectl edit` や `kubectl set` でセットされた値を無視するには、以下のようにします。
---
texts:
  en: Use `kubectl apply edit-last-applied` to remove the value from the Last Applied (if it is present)
  ja: "`kubectl apply edit-last-applied` を使って前回適用されたリソース設定から (もし存在すれば) 値を削除します"
---
texts:
  en: Remove the field from the Resource Config
  ja: リソース設定からフィールドを削除します
---
texts:
  en: This is the same technique for retaining values set by cluster components such as autoscalers.
  ja: これは autoscaler のようなクラスタコンポーネントによって設定された値を保持するのと同じテクニックです。
