texts:
  en: >-
    {% panel style="success", title="Providing Feedback" %}

    **Provide feedback at the [survey](https://www.surveymonkey.com/r/CLQBQHR)**
  ja: __COPY__
---
texts:
  en: '{% panel style="info", title="TL;DR" %}'
  ja: __COPY__
---
texts:
  en: Fields set and deleted from Resource Config are merged into Resources by Apply
  ja: __COPY__
---
texts:
  en: If a Resource already exists, Apply updates the Resources by merging the local Resource Config into the remote Resources
  ja: __COPY__
---
texts:
  en: Fields removed from the Resource Config will be deleted from the remote Resource
  ja: __COPY__
---
texts:
  en: Merging Fields
  ja: __COPY__
---
texts:
  en: >-
    {% panel style="warning", title="Advanced Section" %}

    This chapter contains advanced material that readers may want to skip and come back to later.
  ja: __COPY__
---
texts:
  en: When are fields merged?
  ja: __COPY__
---
texts:
  en: >-
    This page describes how Resource Config is merged with Resources or other Resource Config.  This

    may occur when:
  ja: __COPY__
---
texts:
  en: "Applying Resource Config updates to the live Resources in the cluster "
  ja: __COPY__
---
texts:
  en: Defining Patches in the `kustomization.yaml` which are overlayed on `resources` and [bases](../app_customization/bases_and_variants.md)
  ja: __COPY__
---
texts:
  en: Applying Resource Config Updates
  ja: __COPY__
---
texts:
  en: >-
    Rather than replacing the Resource with the new Resource Config, **Apply will merge the new Resource Config

    into the live Resource**.  This retains values which may be set by the control plane - such as `replicas` values

    set by auto scalers
  ja: __COPY__
---
texts:
  en: Defining Patches
  ja: __COPY__
---
texts:
  en: >-
    `patches` are sparse Resource Config which **contain a subset of fields that override values

    defined in other Resource Config** with the same Group/Version/Kind/Namespace/Name.

    This is used to alter values defined on Resource Config without having to fork it.
  ja: __COPY__
---
texts:
  en: Motivation (Apply)
  ja: __COPY__
---
texts:
  en: This page describes the semantics for merging Resource Config.
  ja: __COPY__
---
texts:
  en: >-
    Ownership of Resource fields are shared between declarative Resource Config authored by human

    users, and values set by Controllers running in the cluster.  Some fields, such as the `status`

    and `clusterIp` fields, are owned exclusively by Controllers.  Fields, such as the `name`

    and `namespace` fields, are owned exclusively by the human user managing the Resource.
  ja: __COPY__
---
texts:
  en: >-
    Other fields, such as `replicas`, may be owned by either human users, the apiserver or

    Controllers.  For example, `replicas` may be explicitly set by a user, implicitly set

    to a default value by the apiserver, or continuously adjusted by a Controller such as

    and HorizontalPodAutoscaler.
  ja: __COPY__
---
texts:
  en: Last Applied Resource Config
  ja: __COPY__
---
texts:
  en: >-
    When Apply creates or updates a Resource, it writes the Resource Config it Applied to an annotation on the

    Resource.  This allows it to compare the last Resource Config it Applied to the current Resource

    Config and identify fields that have been deleted.
  ja: __COPY__
---
texts:
  en: Merging Resources
  ja: __COPY__
---
texts:
  en: "Following are the merge semantics for Resources:"
  ja: __COPY__
---
texts:
  en: "**Adding Fields:**"
  ja: __COPY__
---
texts:
  en: >-
    Fields present in the Resource Config that are missing from the Resource will be added to the
      Resource.
  ja: __COPY__
---
texts:
  en: Fields will be added to the Last Applied Resource Config
  ja: __COPY__
---
texts:
  en: "**Updating Fields**"
  ja: __COPY__
---
texts:
  en: >-
    Fields present in the Resource Config that are also present in the Resource will be merged recursively
      until a primitive field is updated, or a field is added / deleted.
  ja: __COPY__
---
texts:
  en: Fields will be updated in the Last Applied Resource Config
  ja: __COPY__
---
texts:
  en: "**Deleting Fields**"
  ja: __COPY__
---
texts:
  en: >-
    Fields present in the **Last Applied Resource Config** that have been removed from the Resource Config
      will be deleted from the Resource.
  ja: __COPY__
---
texts:
  en: >-
    Fields set to *null* in the Resource Config that are present in the Resource Config will be deleted from the
      Resource.
  ja: __COPY__
---
texts:
  en: Fields will be removed from the Last Applied Resource Config
  ja: __COPY__
---
texts:
  en: >-
    {% panel style="danger", title="Removing Fields from Resource Config" %}

    Simply removing a field from the Resource Config will *not* transfer the ownership to the cluster.

    Instead it will delete the field from the Resource.  If a field is set in the Resource Config and

    the user wants to give up ownership (e.g. removing `replicas` from the Resource Config and using

    and autoscaler), the user must first remove it from the last Applied Resource Config stored by the

    cluster.
  ja: __COPY__
---
texts:
  en: >-
    This can be performed using `kubectl apply edit-last-applied` to delete the `replicas` field from

    the **Last Applied Resource Config**, and then deleting it from the **Resource Config.**
  ja: __COPY__
---
texts:
  en: Field Merge Semantics
  ja: __COPY__
---
texts:
  en: Merging Primitives
  ja: __COPY__
---
texts:
  en: Primitive fields are merged by replacing the current value with the new value.
  ja: __COPY__
---
texts:
  en: "**Field Creation:** Add the primitive field"
  ja: __COPY__
---
texts:
  en: "**Field Update:** Change the primitive field value"
  ja: __COPY__
---
texts:
  en: "**Field Deletion:** Delete the primitive field"
  ja: __COPY__
---
texts:
  en: Field in Resource Config
  ja: __COPY__
---
texts:
  en: Field in Resource
  ja: __COPY__
---
texts:
  en: Field in Last Applied
  ja: __COPY__
---
texts:
  en: Action
  ja: __COPY__
---
texts:
  en: Yes
  ja: __COPY__
---
texts:
  en: "-"
  ja: __COPY__
---
texts:
  en: Set live to the Resource Config value.
  ja: __COPY__
---
texts:
  en: No
  ja: __COPY__
---
texts:
  en: Remove from Resource.
  ja: __COPY__
---
texts:
  en: Do nothing.
  ja: __COPY__
---
texts:
  en: Merging Objects
  ja: __COPY__
---
texts:
  en: >-
    Objects fields are updated by merging the sub-fields recursively (by field name) until a primitive field is found or

    the field is added / deleted.
  ja: __COPY__
---
texts:
  en: "**Field Creation:** Add the object field"
  ja: __COPY__
---
texts:
  en: "**Field Update:** Recursively compare object sub-field values and merge them"
  ja: __COPY__
---
texts:
  en: "**Field Deletion:** Delete the object field"
  ja: __COPY__
---
texts:
  en: "**Merge Table:** For each field merge Resource Config and Resource values with the same name"
  ja: __COPY__
---
texts:
  en: Recursively merge the Resource Config and Resource values.
  ja: __COPY__
---
texts:
  en: Remove field from Resource.
  ja: __COPY__
---
texts:
  en: Merging Maps
  ja: __COPY__
---
texts:
  en: >-
    Map fields are updated by merging the elements (by key) until a primitive field is found or the value is

    added / deleted.
  ja: __COPY__
---
texts:
  en: "**Field Creation:** Add the map field"
  ja: __COPY__
---
texts:
  en: "**Field Update:** Recursively compare map values by key and merge them"
  ja: __COPY__
---
texts:
  en: "**Field Deletion:** Delete the map field"
  ja: __COPY__
---
texts:
  en: "**Merge Table:** For each map element merge Resource Config and Resource values with the same key"
  ja: __COPY__
---
texts:
  en: Key in Resource Config
  ja: __COPY__
---
texts:
  en: Key   in Resource
  ja: __COPY__
---
texts:
  en: Key in Last Applied
  ja: __COPY__
---
texts:
  en: Remove map element from Resource.
  ja: __COPY__
---
texts:
  en: Merging Lists of Primitives
  ja: __COPY__
---
texts:
  en: >-
    Lists of primitives will be merged if they have a `patch strategy: merge` on the field otherwise they will

    be replaced.  [Finalizer list example](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#objectmeta-v1-meta)
  ja: __COPY__
---
texts:
  en: "**Merge Strategy:**"
  ja: __COPY__
---
texts:
  en: Merged primitive lists behave like ordered sets
  ja: __COPY__
---
texts:
  en: Replace primitive lists are replaced when merged
  ja: __COPY__
---
texts:
  en: >-
    **Ordering:** Uses the ordering specified in the Resource Config.  Elements not specified in the Resource Config

    do not have ordering guarantees with respect to the elements in the Resource Config.
  ja: __COPY__
---
texts:
  en: "**Merge Table:** For each list element merge Resource Config and Resource element with the same value"
  ja: __COPY__
---
texts:
  en: Element in Resource Config
  ja: __COPY__
---
texts:
  en: Element in Resource
  ja: __COPY__
---
texts:
  en: Element in Last Applied
  ja: __COPY__
---
texts:
  en: Do nothing
  ja: __COPY__
---
texts:
  en: Add to list.
  ja: __COPY__
---
texts:
  en: Remove from list.
  ja: __COPY__
---
texts:
  en: >-
    This merge strategy uses the patch merge key to identify container elements in a list and merge them.

    The `patch merge key` is defined in the [Kubernetes API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#podspec-v1-core)

    on the field.
  ja: __COPY__
---
texts:
  en: Merging Lists of Objects
  ja: __COPY__
---
texts:
  en: >-
    **Merge Strategy:** Lists of primitives may be merged or replaced.  Lists are merged if the list has a `patch strategy` of *merge*

    and a `patch merge key` on the list field.  [Container list example](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.12/#podspec-v1-core).
  ja: __COPY__
---
texts:
  en: >-
    **Merge Key:** The `patch merge key` is used to identify same elements in a list.  Unlike map elements (keyed by key) and object fields

    (keyed by field name), lists don't have a built-in merge identity for elements (index does not define identity).

    Instead an object field is used as a synthetic *key/value* for merging elements.  This fields is the

    `patch merge key`.  List elements with the same patch merge key will be merged when lists are merged.
  ja: __COPY__
---
texts:
  en: >-
    **Ordering:** Uses the ordering specified in the Resource Config.  Elements not specified in the Resource Config

    do not have ordering guarantees.
  ja: __COPY__
---
texts:
  en: >-
    **Merge Table:** For each list element merge Resource Config and Resource element where the elements have the same

    value for the `patch merge key`
  ja: __COPY__
---
texts:
  en: >-
    {% panel style="info", title="Edit and Set" %}

    While `kubectl edit` and `kubectl set` ignore the Last Applied Resource Config, Apply will

    change any values in the Resource Config set by either `kubectl edit` or `kubectl set`.

    To ignore values set by `kubectl edit` or `kubectl set`:
  ja: __COPY__
---
texts:
  en: Use `kubectl apply edit-last-applied` to remove the value from the Last Applied (if it is present)
  ja: __COPY__
---
texts:
  en: Remove the field from the Resource Config
  ja: __COPY__
---
texts:
  en: This is the same technique for retaining values set by cluster components such as autoscalers.
  ja: __COPY__
