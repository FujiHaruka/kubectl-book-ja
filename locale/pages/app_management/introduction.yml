texts:
  en: >-
    {% panel style="success", title="Providing Feedback" %}

    **Provide feedback at the [survey](https://www.surveymonkey.com/r/CLQBQHR)**

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: '{% panel style="info", title="TL;DR" %}'
  ja: __COPY__
---
texts:
  en: Apply manages Applications through files defining Kubernetes Resources (i.e. Resource Config)
  ja: __COPY__
---
texts:
  en: >-
    Kustomize is used to author Resource Config

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: Declarative Application Management
  ja: __COPY__
---
texts:
  en: This section covers how to declaratively manage Workloads and Applications.
  ja: __COPY__
---
texts:
  en: >-
    Workloads in a cluster may be configured through files called *Resource Config*.  These files are

    typically checked into source control, and allow cluster state changes to be reviewed before they

    are audited and applied.
  ja: __COPY__
---
texts:
  en: There are 2 components to Application Management.
  ja: __COPY__
---
texts:
  en: Client Component
  ja: __COPY__
---
texts:
  en: >-
    The client component consists of authoring Resource Config which defines the desired state

    of an Application. This may be done as a collection of raw Resource Config files, or by

    composing and overlaying Resource Config authored by separate teams

    (using the `-k` flag with a `kustomization.yaml`).
  ja: __COPY__
---
texts:
  en: "Kustomize offers low-level tooling for simplifying the authoring of Resource Config.  It provides:"
  ja: __COPY__
---
texts:
  en: "**Generating Resource Config** from other canonical sources - e.g. ConfigMaps, Secrets"
  ja: __COPY__
---
texts:
  en: "**Reusing and Composing one or more collections of Resource Config**"
  ja: __COPY__
---
texts:
  en: "**Customizing Resource Config**"
  ja: __COPY__
---
texts:
  en: "**Setting cross-cutting fields** - e.g. namespace, labels, annotations, name-prefixes, etc"
  ja: __COPY__
---
texts:
  en: >-
    **Example:** One user may define a Base for an application,  while another user may customize

    a specific instance of the Base.
  ja: __COPY__
---
texts:
  en: Server Component
  ja: __COPY__
---
texts:
  en: >-
    The server component consists of a human applying the authored Resource Config to the cluster

    to create or update Resources.  Once Applied, the Kubernetes cluster will set additional desired

    state on the Resource - e.g. *defaulting unspecified fields, filling in IP addresses, autoscaling

    replica count, etc.*
  ja: __COPY__
---
texts:
  en: >-
    Note that the process of Application Management is a collaborative one between users and the

    Kubernetes system itself - where each may contribute to defining the desired state.
  ja: __COPY__
---
texts:
  en: "**Example**: An Autoscaler Controller in the cluster may set the scale field on a Deployment managed by a user."
  ja: __COPY__
