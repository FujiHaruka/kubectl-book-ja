texts:
  en: >-
    {% panel style="success", title="Providing Feedback" %}

    **Provide feedback at the [survey](https://www.surveymonkey.com/r/CLQBQHR)**
  ja: >-
    {% panel style="success", title="翻訳" %}

    このドキュメントは [The Kubectl Book](https://kubectl.docs.kubernetes.io/) の翻訳です。翻訳の間違いは [GitHub の翻訳リポジトリ](https://github.com/FujiHaruka/kubectl-book-ja/issues) までお願いします。
---
texts:
  en: '{% panel style="info", title="TL;DR" %}'
  ja: __COPY__
---
texts:
  en: Apply manages Applications through files defining Kubernetes Resources (i.e. Resource Config)
  ja: Apply コマンドは Kubernetes リソースを定義するファイル (リソース構成) を通じてアプリケーションを管理する
---
texts:
  en: Kustomize is used to author Resource Config
  ja: Kustomize はリソース構成を書くために使われる
---
texts:
  en: Declarative Application Management
  ja: 宣言的なアプリケーション管理
---
texts:
  en: This section covers how to declaratively manage Workloads and Applications.
  ja: この章では、ワークロードとアプリケーションを宣言的に管理する方法を説明します。
---
texts:
  en: >-
    Workloads in a cluster may be configured through files called *Resource Config*.  These files are

    typically checked into source control, and allow cluster state changes to be reviewed before they

    are audited and applied.
  ja: クラスタ内のワークロードは**リソース構成 (Resource Config) **と呼ばれるファイルを通じて設定できます。これらのファイルは通常、バージョン管理の下に置かれ、クラスタの状態を検査・適用する前に設定の変更をレビューできるようにします。
---
texts:
  en: There are 2 components to Application Management.
  ja: アプリケーション管理は二つのコンポーネントから構成されます。
---
texts:
  en: Client Component
  ja: クライアントコンポーネント
---
texts:
  en: >-
    The client component consists of authoring Resource Config which defines the desired state

    of an Application. This may be done as a collection of raw Resource Config files, or by

    composing and overlaying Resource Config authored by separate teams

    (using the `-k` flag with a `kustomization.yaml`).
  ja: クライアントコンポーネントは、アプリケーションの望ましい状態を定義するリソース構成を書くことからなります。生のリソース構成ファイル群を書くこともありますが、別々のチームが書いたリソース構成をまとめ上げることもあります (`kustomization.yaml` を使うには `-k` フラグを使用)。
---
texts:
  en: "Kustomize offers low-level tooling for simplifying the authoring of Resource Config.  It provides:"
  ja: Kustomize はリソース構成を書く作業を簡単にするため、低レベルのツールを提供しています。
---
texts:
  en: "**Generating Resource Config** from other canonical sources - e.g. ConfigMaps, Secrets"
  ja: "**リソース構成の生成**。たとえば ConfigMap や Secret を基準となる他のソースから生成する"
---
texts:
  en: "**Reusing and Composing one or more collections of Resource Config**"
  ja: "**一つ以上のリソース構成のファイル群を再利用・構成する**"
---
texts:
  en: "**Customizing Resource Config**"
  ja: "**リソース構成をカスタマイズする**"
---
texts:
  en: "**Setting cross-cutting fields** - e.g. namespace, labels, annotations, name-prefixes, etc"
  ja: "**横断的にフィールドを設定する - たとえば名前空間、ラベル、annotation、名前のプレフィックスなど**"
---
texts:
  en: >-
    **Example:** One user may define a Base for an application,  while another user may customize

    a specific instance of the Base.
  ja: "**例:** 一人がアプリケーションのベース (Base) を定義し、別の人がベースの特定のインスタンスをカスタマイズするというやり方が可能です。"
---
texts:
  en: Server Component
  ja: サーバーコンポーネント
---
texts:
  en: >-
    The server component consists of a human applying the authored Resource Config to the cluster

    to create or update Resources.  Once Applied, the Kubernetes cluster will set additional desired

    state on the Resource - e.g. *defaulting unspecified fields, filling in IP addresses, autoscaling

    replica count, etc.*
  ja: サーバーコンポーネントは、書かれたリソース構成をクラスタに適用することからなります。Apply が実行されると、Kubernetes クラスタはリソースを作成・更新することになりますが、リソース構成ファイルには書かれていないリソース上の望ましい状態を追加します。たとえば、**指定されていないフィールドをデフォルト値で埋め、IP アドレスを入力し、レプリカ数をオートスケールさせるといったことです。**
---
texts:
  en: >-
    Note that the process of Application Management is a collaborative one between users and the

    Kubernetes system itself - where each may contribute to defining the desired state.
  ja: 留意点として、アプリケーション管理はユーザーと Kubernetes システム自身とが協調するプロセスです。望ましい状態を定義するため、互いに貢献し合います。
---
texts:
  en: "**Example**: An Autoscaler Controller in the cluster may set the scale field on a Deployment managed by a user."
  ja: "**例:** クラスタ内の Autoscaler コントローラは Deployment のフィールドにユーザーが管理するスケールフィールドを設定することができます。"
