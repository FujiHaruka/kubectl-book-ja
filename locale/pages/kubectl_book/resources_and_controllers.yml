texts:
  en: >-
    {% panel style="success", title="Providing Feedback" %}

    **Provide feedback at the [survey](https://www.surveymonkey.com/r/JH35X82)**
  ja: __COPY__
---
texts:
  en: '{% panel style="info", title="TL;DR" %}'
  ja: __COPY__
---
texts:
  en: A Kubernetes API has 2 parts - a Resource Type and a Controller
  ja: Kubernetes API はリソースタイプとコントローラという 2 つの部分からなる
---
texts:
  en: Resources are objects declared as json or yaml and written to a cluster
  ja: リソースは JSON や YAML で宣言されたオブジェクトで、クラスタに書き込まれる
---
texts:
  en: Controllers asynchronously actuate Resources after they are stored
  ja: コントローラはリソースが書き込まれてから、非同期にリソースを作動させる
---
texts:
  en: Kubernetes Resources and Controllers Overview
  ja: Kubernetes のリソースとコントローラの概要
---
texts:
  en: >-
    This section provides background on the Kubernetes Resource model.  This information

    is also available at the [kubernetes.io](https://kubernetes.io/docs/home/) docs site.
  ja: この章では、Kubernetes リソースモデルの背景を説明します。ここに書かれていることは [kubernetes.io](https://kubernetes.io/docs/home/) のドキュメントでも確認できます。
---
texts:
  en: "For more information on Kubernetes Resources see: [kubernetes.io Concepts](https://kubernetes.io/docs/concepts/)."
  ja: Kubernetes リソースの詳細は [kubernetes.io コンセプト](https://kubernetes.io/docs/concepts/)をご覧ください。
---
texts:
  en: Resources
  ja: リソース
---
texts:
  en: >-
    Instances of Kubernetes objects (e.g. Deployment, Services, Namespaces, etc)

    are called **Resources**.
  ja: Kubernetes オブジェクト (Deployment、Service、名前空間など) のインスタンスを**リソース**と呼びます。
---
texts:
  en: Resources which run containers are referred to as **Workloads**.
  ja: 特に、コンテナを実行するリソースは、**ワークロード**といいます。
---
texts:
  en: "Examples of Workloads:"
  ja: 以下がワークロードの例です。
---
texts:
  en: "[Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)"
  ja: __COPY__
---
texts:
  en: "[StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/)"
  ja: __COPY__
---
texts:
  en: "[Jobs](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/)"
  ja: __COPY__
---
texts:
  en: "[CronJobs](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/)"
  ja: __COPY__
---
texts:
  en: "[DaemonSets](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/) "
  ja: __COPY__
---
texts:
  en: >-
    **Users work with Resource APIs by declaring them in files which are then Applied to a Kubernetes

    cluster.  These declarative files are called Resource Config.**
  ja: "**リソース API の機能を使うには、まずリソースをファイル内で宣言し、次に Kubernetes クラスタに Apply します。ここで記述される宣言的なファイルをリソース設定と呼びます。**"
---
texts:
  en: >-
    Resource Config is *Applied* (declarative Create/Update/Delete) to a Kubernetes cluster using

    tools such as Kubectl, and then actuated by a *Controller*.
  ja: リソース設定は、Kubectl のようなツールを通じて Kubernetes クラスタに (宣言的な作成・更新・削除を) **Apply** され、そのあとで**コントローラ**がリソース設定を反映させます。
---
texts:
  en: "Resources are uniquely identified:"
  ja: リソースは以下の属性によって一意に識別されます。
---
texts:
  en: "**apiVersion** (API Type Group and Version)"
  ja: "**apiVersion** (API タイプグループとバージョン)"
---
texts:
  en: "**kind** (API Type Name)"
  ja: "**kind** (API タイプの名前)"
---
texts:
  en: "**metadata.namespace** (Instance namespace)"
  ja: "**metadata.namespace** (インスタンスの名前空間)"
---
texts:
  en: "**metadata.name** (Instance name)"
  ja: "**metadata.name** (インスタンス名)"
---
texts:
  en: >-
    {% panel style="warning", title="Default Namespace" %}

    If namespace is omitted from the Resource Config, the *default* namespace is used.  Users

    should almost always explicitly specify the namespace for their Application using a

    `kustomization.yaml`.
  ja: >-
    {% panel style="warning", title="デフォルトの名前空間" %}

    リソース設定で名前空間が省略されると **default** という名前空間が使用されますが、アプリケーションには名前空間を必ず明示的に指定すべきと言って差し支えありません。名前空間は `kustomization.yaml` に記述します。
---
texts:
  en: Resources Structure
  ja: リソースの構造
---
texts:
  en: Resources have the following components.
  ja: リソースの構成要素は次の通りです。
---
texts:
  en: "**TypeMeta:** Resource Type **apiVersion** and **kind**."
  ja: "**TypeMeta:** リソースタイプの **apiVersion** と**種類**"
---
texts:
  en: "**ObjectMeta:** Resource **name** and **namespace** + other metadata (labels, annotations, etc)."
  ja: "**ObjectMeta:** リソースの**名前**、**名前空間** + 他のメタデータ (ラベル、アノテーションなど)"
---
texts:
  en: "**Spec:** the desired state of the Resource - intended state the user provides to the cluster."
  ja: "**Spec:** リソースの望ましい状態 - ユーザーがクラスタに教えるあるべき状態"
---
texts:
  en: "**Status:** the observed state of the object - recorded state the cluster provides to the user."
  ja: "**Status:** 観測された現在のオブジェクトの状態 - クラスタがユーザーに教える記録された状態"
---
texts:
  en: Resource Config written by the user omits the Status field.
  ja: ユーザーがリソース設定を書くときには Status フィールドは省略します。
---
texts:
  en: "**Example Deployment Resource Config**"
  ja: >-
    **Deployment のリソース設定の例**
---
texts:
  en: >-
    {% panel style="info", title="Spec and Status" %}

    Resources such as ConfigMaps and Secrets do not have a Status,

    and as a result their Spec is implicit (i.e. they don't have a spec field).
  ja: >-
    {% panel style="info", title="Spec と Status" %}

    ConfigMap や Secret のようなリソースには Status がありません。そのため、それらの Spec は暗黙的です (言い換えると spec フィールドがありません)。
---
texts:
  en: Controllers
  ja: コントローラ
---
texts:
  en: >-
    Controllers actuate Kubernetes APIs.  They observe the state of the system and look for

    changes either to desired state of Resources (create, update, delete) or the system

    (Pod or Node dies).
  ja: コントローラは Kubernetes API を作動します。コントローラはシステムの状態を監視し、リソースを望ましい状態にするための変更 (作成、更新、削除) や、システムの変更 (Pod や Node の停止) を検知します。
---
texts:
  en: >-
    Controllers then make changes to the cluster to fulfill the intent specified by the user

    (e.g. in Resource Config) or automation (e.g. changes from Autoscalers).
  ja: コントローラはユーザーが (たとえばリソース設定の中で) 決めた意図通りの仕様や (たとえば Autoscaler による) 自動化の要求を満たすようにクラスタを変更します。
---
texts:
  en: >-
    **Example:** After a user creates a Deployment, the Deployment Controller will see

    that the Deployment exists and verify that the corresponding ReplicaSet it expects

    to find exists.  The Controller will see that the ReplicaSet does not exist and will

    create one.
  ja: "**例**: Deployment が作成されると、Deployment コントローラは Deployment が存在することを確認し、対応する ReplicaSet が期待どおりに存在するかどうか検証します。ReplicaSet が存在しなければ作成します。"
---
texts:
  en: >-
    {% panel style="warning", title="Asynchronous Actuation" %}

    Because Controllers run asynchronously, issues such as a bad

    Container Image or unschedulable Pods will not be present in the CRUD response.

    Tooling must facilitate processes for watching the state of the system until changes are

    completely actuated by Controllers.  Once the changes have been fully actuated such

    that the desired state matches the observed state, the Resource is considered *Settled*.
  ja: >-
    {% panel style="warning", title="非同期な動作" %}

    コントローラは非同期に実行されるため、コンテナイメージが壊れているとか Pod がスケジュール不能であるとかといった問題は CRUD のレスポンスでは顕在化しません。何かツールを作るときには、コントローラの動作が完了するまでシステムの状態の監視を簡単にできるようにすべきです。リソースの変更が完了して、望ましい状態とコントローラが観測した状態とが一致したら、リソースは**安定状態にある**とみなされます。
---
texts:
  en: Controller Structure
  ja: コントローラの構造
---
texts:
  en: "**Reconcile**"
  ja: "**調停**"
---
texts:
  en: >-
    Controllers actuate Resources by reading the Resource they are Reconciling + related Resources,

    such as those that they create and delete.
  ja: コントローラがリソースを作動させるやり方は、リソースとそれに関連して作成・削除するリソースを読み込んで、期待される状態に一致させるというもので、これを「調停」といいます。
---
texts:
  en: >-
    **Controllers *do not* Reconcile events, rather they Reconcile the expected

    cluster state to the observed cluster state at the time Reconcile is run.**
  ja: "**コントローラは、イベントから受けた情報によってクラスタを調停するの*ではなく*、調停の実行時にクラスタを観測し、現在のクラスタの状態を期待されるクラスタの状態に一致させます。**"
---
texts:
  en: Deployment Controller creates/deletes ReplicaSets
  ja: Deployment コントローラは ReplicaSets を作成・削除します
---
texts:
  en: ReplicaSet Controller creates/delete Pods
  ja: ReplicaSet コントローラは Pod を作成・削除します
---
texts:
  en: Scheduler (Controller) writes Nodes to Pods
  ja: Scheduler (コントローラ) は Node を Pod に書き込みます
---
texts:
  en: Node (Controller) runs Containers specifid in Pods on the Node
  ja: Node (コントローラ) は Node 上の Pod に定義されたコンテナを実行します
---
texts:
  en: "**Watch**"
  ja: "**監視**"
---
texts:
  en: >-
    Controllers actuate Resources *after* they are written by Watching Resource Types, and then

    triggering Reconciles from Events.  After a Resource is created/updated/deleted, Controllers

    Watching the Resource Type will receive a notification that the Resource has been changed,

    and they will read the state of the system to see what has changed (instead of relying on

    the Event for this information).
  ja: コントローラがリソースを作動させるタイミングは、監視用のリソースタイプによってリソースが書き込まれ、それからイベントが調停をトリガーした**後**です。リソースが作成・更新・削除された後、リソースタイプを監視しているコントローラはリソースが更新されたという通知を受け取り、(イベントが持っている更新情報に依存することなく) システムの状態を読み込んで何を更新すべきかを理解します。
---
texts:
  en: Deployment Controller watches Deployments + ReplicaSets (+ Pods)
  ja: Deployment コントローラは Deployment と ReplicaSet (と Pod) を監視します
---
texts:
  en: ReplicaSet Controller watches ReplicaSets + Pods
  ja: ReplicaSet コントローラは ReplicaSets と Pod を監視します
---
texts:
  en: Scheduler (Controller) watches Pods
  ja: Scheduler (コントローラ) は Pod を監視します
---
texts:
  en: Node (Controller) watches Pods (+ Secrets + ConfigMaps)
  ja: Node (コントローラ) は Pod (と Secret と ConfigMap) を監視します
---
texts:
  en: >-
    {% panel style="info", title="Level vs Edge Based Reconciliation" %}

    Because Controllers don't respond to individual Events, but instead Reconcile the state

    of the system at the time that Reconcile is run, **changes from several different events may be observed

    and Reconciled together.**  This is referred to as a *Level Based* system, whereas a system that

    responds to each event individually would be referred to as an *Edge Based* system.
  ja: >-
    {% panel style="info", title="レベルベースの調停とエッジベースの調停" %}

    コントローラは個々のイベントに反応せず、調停の実行時にシステムの状態を期待される状態に一致させるため、**さまざまなイベントが変更を通知してきても、まとめて一度にシステムの観測と調停を行うことができます。**これは**レベルベース**のシステムと呼ばれます。これと対比して、個々のイベントに対して反応するシステムは**エッジベース**のシステムと呼ばれます。
---
texts:
  en: Overview of Kubernetes Resource APIs
  ja: Kubernetes リソース API の概要
---
texts:
  en: Pods
  ja: Pod
---
texts:
  en: >-
    Containers are run in [*Pods*](https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/) which are

    scheduled to run on *Nodes* (i.e. worker machines) in a cluster.
  ja: コンテナは [**Pod**](https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/) の中で実行され、Pod の実行はクラスタ内の **Node** 上でスケジュールされます。
---
texts:
  en: "Pods run a *single replica* of an Application and provide:"
  ja: Pod はアプリケーションの**レプリカを一つ**を実行し、以下を提供します。
---
texts:
  en: Compute Resources (cpu, memory, disk)
  ja: 計算リソース (CPU、メモリ、ディスク)
---
texts:
  en: Environment Variables
  ja: 環境変数
---
texts:
  en: Readiness and Health Checking
  ja: ヘルスチェック
---
texts:
  en: Network (IP address shared by containers in the Pod)
  ja: ネットワーク (IP アドレスは Pod 内のコンテナに共有されます)
---
texts:
  en: Mounting Shared Configuration and Secrets
  ja: Shared Configuration と Secret のマウント
---
texts:
  en: Mounting Storage Volumes
  ja: Storage Volume のマウント
---
texts:
  en: Initialization
  ja: 初期化
---
texts:
  en: >-
    {% panel style="warning", title="Multi Container Pods" %}

    Multiple replicas of an Application should be created using a Workload API to manage

    creation and deletion of Pod replicas using a PodTemplate.
  ja: >-
    {% panel style="warning", title="マルチコンテナの Pod" %}

    アプリケーションの複数のレプリカを作るにはワークロード API を使うべきです。ワークロード API は Pod レプリカの作成および削除を PodTemplate で管理できます。
---
texts:
  en: >-
    In some cases a Pod may contain multiple Containers forming a single instance of an Application.  These

    containers may coordinate with one another through shared network (IP) and storage.
  ja: 場合によっては Pod は複数のコンテナを含み、それがアプリケーションの一つのインスタンスを形成しているかもしれません。Pod 内のコンテナはネットワーク (IP) とストレージを共有することによって協働します。
---
texts:
  en: Workloads
  ja: ワークロード
---
texts:
  en: >-
    Pods are typically managed by higher level abstractions that handle concerns such as

    replication, identity, persistent storage, custom scheduling, rolling updates, etc.
  ja: 一般的に Pod は関心ごとに分けられた上位の抽象化によって管理されます。たとえば、レプリケーション、同一性、永続化ストレージ、カスタムスケジュール、ローリングアップデートなどです。
---
texts:
  en: "The most common out-of-the-box Workload APIs (manage Pods) are:"
  ja: 最もよく使われるワークロード API (Pod を管理する API) は以下です。
---
texts:
  en: "[Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/) (Stateless Applications)"
  ja: "[Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/) (ステートレスなアプリケーション)"
---
texts:
  en: replication + rollouts
  ja: レプリケーション + ロールアウト
---
texts:
  en: "[StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/) (Stateful Applications)"
  ja: "[StatefulSets](https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/) (ステートフルなアプリケーション)"
---
texts:
  en: replication + rollouts + persistent storage + identity
  ja: レプリケーション + ロールアウト + 永続化ストレージ + 同一性
---
texts:
  en: "[Jobs](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/) (Batch Work)"
  ja: "[Jobs](https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/) (バッチ処理)"
---
texts:
  en: run to completion
  ja: 処理を完了する
---
texts:
  en: "[CronJobs](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/) (Scheduled Batch Work)"
  ja: "[CronJobs](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/) (スケジュールされたバッチ処理)"
---
texts:
  en: scheduled run to completion
  ja: 定期的に処理を完了する
---
texts:
  en: "[DaemonSets](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/) (Per-Machine)"
  ja: "[DaemonSets](https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/) (マシンごと)"
---
texts:
  en: per-Node scheduling
  ja: Node ごとのスケジュール
---
texts:
  en: >-
    {% panel style="success", title="API Abstraction Layers" %}

    High-level Workload APIs may manage lower-level Workload APIs instead of directly managing Pods

    (e.g. Deployments manage ReplicaSets).
  ja: >-
    {% panel style="success", title="API の抽象化レイヤー" %}

    上位のワークロード API は下位のワークロード API を管理できます。Pod を直接管理する必要はありません。(たとえば Deployment は ReplicaSet を管理します)
---
texts:
  en: Service Discovery and Load Balancing
  ja: サービスディスカバリとロードバランシング
---
texts:
  en: >-
    Service discovery and Load Balancing may be managed by a *Service* object.  Services provide a single

    virtual IP address and dns name load balanced to a collection of Pods matching Labels.
  ja: サービスディスカバリとロードバランシングは **Service** オブジェクトが管理します。Service は一つの仮想 IP アドレスと DNS 名を提供し、ラベルにマッチする Pod にロードバランスされます。
---
texts:
  en: '{% panel style="info", title="Internal vs External Services" %}'
  ja: '{% panel style="info", title="内部サービス vs 外部サービス" %}'
---
texts:
  en: >-
    [Services Resources](https://kubernetes.io/docs/concepts/services-networking/service/)
      (L4) may expose Pods internally within a cluster or externally through an HA proxy.
  ja: >-
    [Service リソース](https://kubernetes.io/docs/concepts/services-networking/service/)
      (L4) は内側に対してはクラスタに、外側に対しては HA プロキシを通じて Pod を公開することができます
---
texts:
  en: >-
    [Ingress Resources](https://kubernetes.io/docs/concepts/services-networking/ingress/) (L7)
      may expose URI endpoints and route them to Services.
  ja: >-
    [Ingress Resources](https://kubernetes.io/docs/concepts/services-networking/ingress/) (L7)
      は URI エンドポイントを公開し、それを Service に振り分けます
---
texts:
  en: Configuration and Secrets
  ja: Configuration と Secret
---
texts:
  en: >-
    Shared Configuration and Secret data may be provided by ConfigMaps and Secrets.  This allows

    Environment Variables, Command Line Arguments and Files to be loosely injected into

    the Pods and Containers that consume them.
  ja: 共有設定と機密情報は ConfigMap と Secret が提供します。これらを使用すると環境変数、コマンドライン引数、ファイルを Pod とコンテナに注入し、その中で使えるようになります。そのおかげで Pod とコンテナはそれらの設定に対して依存関係が薄くなります。
---
texts:
  en: '{% panel style="info", title="ConfigMaps vs Secrets" %}'
  ja: '{% panel style="info", title="ConfigMap vs Secret" %}'
---
texts:
  en: >-
    [ConfigMaps](https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/)
      are for providing non-sensitive data to Pods.
  ja: >-
    [ConfigMaps](https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/)
      は機密でないデータを Pod に提供します
---
texts:
  en: >-
    [Secrets](https://kubernetes.io/docs/concepts/configuration/secret/)
      are for providing sensitive data to Pods.
  ja: >-
    [Secrets](https://kubernetes.io/docs/concepts/configuration/secret/)
      は機密データを Pod に提供します
