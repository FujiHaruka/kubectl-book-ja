texts:
  en: >-
    {% panel style="success", title="Providing Feedback" %}

    **Provide feedback at the [survey](https://www.surveymonkey.com/r/JH35X82)**

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: >-
    {% panel style="warning", title="Experimental" %}

    **Content in this chapter is experimental and will evolve based on user feedback.**
  ja: __COPY__
---
texts:
  en: >-
    Leave feedback on the conventions by creating an issue in the [kubectl](https://github.com/kubernetes/kubectl/issues)

    GitHub repository.
  ja: __COPY__
---
texts:
  en: >-
    Also provide feedback on new kubectl docs at the [survey](https://www.surveymonkey.com/r/JH35X82)

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: '{% panel style="info", title="TL;DR" %}'
  ja: __COPY__
---
texts:
  en: Use **directory hierarchy to structure Resource Config**
  ja: __COPY__
---
texts:
  en: >-
    Separate directories for separate Environment and Cluster [Config Variants](../app_customization/bases_and_variants.md)

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: Directory Structure Based Layout
  ja: __COPY__
---
texts:
  en: Motivation
  ja: __COPY__
---
texts:
  en: >-
    {% panel style="success", title="Which is right for my organization?" %}

    While this chapter is focused on conventions when using Directories, Branches and

    Repositories should be used with Directories as needed.

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: >-
    {% panel style="info", title="Config Repo or Mono Repo?" %}

    The techniques and conventions in this Chapter work regardless of whether or not the Resource Config

    exists in the same Repository as the source code that is being deployed.

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: Directory Structure
  ja: __COPY__
---
texts:
  en: Dir Type
  ja: __COPY__
---
texts:
  en: Deployed to a Cluster
  ja: __COPY__
---
texts:
  en: Contains
  ja: __COPY__
---
texts:
  en: Example Names
  ja: __COPY__
---
texts:
  en: Base
  ja: __COPY__
---
texts:
  en: "**No** - Used as base"
  ja: __COPY__
---
texts:
  en: Shared Config.
  ja: __COPY__
---
texts:
  en: "`base/`"
  ja: __COPY__
---
texts:
  en: Env
  ja: __COPY__
---
texts:
  en: "**No** - Contains other dirs"
  ja: __COPY__
---
texts:
  en: Base and Cluster dirs.
  ja: __COPY__
---
texts:
  en: "`test/`, `staging/`, `prod/`"
  ja: __COPY__
---
texts:
  en: Cluster
  ja: __COPY__
---
texts:
  en: "**Yes** - Manually or Continuously"
  ja: __COPY__
---
texts:
  en: Deployable Config.
  ja: __COPY__
---
texts:
  en: "`us-west1`, `us-east1`, `us-central1`"
  ja: __COPY__
---
texts:
  en: Bases
  ja: __COPY__
---
texts:
  en: A Kustomize Base (e.g. `bases:`) provides shared Config that is customized by some consuming `kustomization.yaml`.
  ja: __COPY__
---
texts:
  en: >-
    The directory structure outlined in this chapter organizes Bases into a hierarchy as:

    `app-bases/environment-bases/cluster`
  ja: __COPY__
---
texts:
  en: Workflow Example
  ja: __COPY__
---
texts:
  en: Changes made to *env/cluster/* roll out to **only that specific env-cluster**
  ja: __COPY__
---
texts:
  en: Changes made to *env>/bases/* roll out to **all clusters for that env**
  ja: __COPY__
---
texts:
  en: Changes made to *bases/* roll out to **all clusters in all envs**
  ja: __COPY__
---
texts:
  en: Diagram
  ja: __COPY__
---
texts:
  en: Scenario
  ja: __COPY__
---
texts:
  en: Alice modifies prod/us-west1 with change A
  ja: __COPY__
---
texts:
  en: Change gets pushed to prod us-west1 cluster by continuous deployment
  ja: __COPY__
---
texts:
  en: Alice modifies prod/bases with change B
  ja: __COPY__
---
texts:
  en: Change gets pushed to all prod clusters by continuous deployment
  ja: __COPY__
---
texts:
  en: Alice modifies bases with change C
  ja: __COPY__
---
texts:
  en: Change gets pushed to all clusters by continuous deployment
  ja: __COPY__
---
texts:
  en: "{% sequence width=1000 %}"
  ja: __COPY__
---
texts:
  en: >-
    participant Config in Git as B

    participant Test Cluster as TC

    participant Staging Cluster as SC

    participant US West Prod Cluster as WC

    participant US East Prod Cluster as EC
  ja: __COPY__
---
texts:
  en: >-
    Note over B: Alice modifies prod/us-west1 with change A

    B-->WC: A deployed
  ja: __COPY__
---
texts:
  en: >-
    Note over B: Alice modifies prod/bases with change B

    B-->EC: B deployed

    B-->WC: B deployed
  ja: __COPY__
---
texts:
  en: >-
    Note over B: Alice modifies bases/ with change C

    B-->EC: C deployed

    B-->TC: C deployed

    B-->WC: C deployed

    B-->SC: C deployed
  ja: __COPY__
---
texts:
  en: "{% endsequence %}"
  ja: __COPY__
---
texts:
  en: "{% method %}"
  ja: __COPY__
---
texts:
  en: "Techniques:"
  ja: __COPY__
---
texts:
  en: Each Layer adds a [namePrefix](../app_management/namespaces_and_names.md#setting-a-name-prefix-or-suffix-for-all-resources) and [commonLabels](../app_management/labels_and_annotations.md#setting-labels-for-all-resources).
  ja: __COPY__
---
texts:
  en: Each Layer adds labels and annotations.
  ja: __COPY__
---
texts:
  en: Each deployable target sets a [namespace](../app_management/namespaces_and_names.md#setting-the-namespace-for-all-resources).
  ja: __COPY__
---
texts:
  en: "Override [Pod Environment Variables and Arguments](../app_customization/customizing_pod_templates.md) using `configMapGenerator`s with `behavior: merge`."
  ja: __COPY__
---
texts:
  en: Perform Last-mile customizations with [patches / overlays](../app_customization/customizing_arbitrary_fields.md)
  ja: __COPY__
---
texts:
  en: "Structure:"
  ja: __COPY__
---
texts:
  en: Put reusable bases under `*/bases/`
  ja: __COPY__
---
texts:
  en: "`<project-name>/bases/`"
  ja: __COPY__
---
texts:
  en: "`<project-name>/<environment>/bases/`"
  ja: __COPY__
---
texts:
  en: Put deployable targets under `<project-name>/<environment>/<cluster>/`
  ja: __COPY__
---
texts:
  en: '{% sample lang="yaml" %}'
  ja: __COPY__
---
texts:
  en: "{% endmethod %}"
  ja: __COPY__
---
texts:
  en: >-
    {% panel style="warning", title="Applying Environment + Cluster" %}

    Though the directory structure contains the cluster in the path, this won't be used by

    Apply to determine the cluster context.  To Apply a specific cluster, add that cluster to the 

    kubectl config`, and specify the corresponding context when running Apply.
  ja: __COPY__
---
texts:
  en: >-
    For more information see [Multi-Cluster](accessing_multiple_clusters.md).

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: >-
    {% panel style="success", title="Code Owners" %}

    Some git hosting services provide the concept of *Code Owners* for providing a finer grain permissions model.

    *Code Owners* may be used to provide separate permissions for separate environments - e.g. dev, test, prod.

    {% endpanel %}
  ja: __COPY__
---
texts:
  en: Rollback Diagram
  ja: __COPY__
---
texts:
  en: >-
    Note over B: Bob modifies bases/ with change B

    B-->EC: B deployed

    B-->SC: B deployed

    B-->WC: B deployed

    Note over B,EC: Prod Outage caused by B

    B-->TC: B deployed

    Note over B: Bob rolls back bases/ git commits to A

    B-->WC: A deployed

    B-->TC: A deployed

    B-->EC: A deployed

    Note over B,EC: Prod Outage resolved

    B-->SC: A deployed
  ja: __COPY__
