texts:
  en: >-
    {% panel style="success", title="Providing Feedback" %}

    **Provide feedback at the [survey](https://www.surveymonkey.com/r/JH35X82)**
  ja: >-
    {% panel style="success", title="翻訳" %}

    このドキュメントは [The Kubectl Book](https://kubectl.docs.kubernetes.io/) の翻訳です。翻訳の GitHub リポジトリは[こちら](https://github.com/FujiHaruka/kubectl-book-ja)。
---
texts:
  en: '{% panel style="info", title="TL;DR" %}'
  ja: __COPY__
---
texts:
  en: Format and print specific fields from Resources
  ja: リソースの特定のフィールドをフォーマットして表示します
---
texts:
  en: Use when scripting with Get
  ja: get コマンドでスクリプトを書くときに使います
---
texts:
  en: Print Resource Fields
  ja: リソースのフィールドを表示する
---
texts:
  en: Motivation
  ja: 動機
---
texts:
  en: Kubectl Get is able to pull out fields from Resources it queries and format them as output.
  ja: Kubectl の get コマンドは検索したリソースからフィールドを抽出し、フォーマットして出力することができます。
---
texts:
  en: This may be **useful for scripting or gathering data** about Resources from a Kubernetes cluster.
  ja: これは Kubernetes クラスタからリソースについてのデータを収集または処理するスクリプトを書くときに便利です。
---
texts:
  en: Get
  ja: Get
---
texts:
  en: >-
    The `kubectl get` reads Resources from the cluster and formats them as output.  The examples in

    this chapter will query for Resources by providing Get the *Resource Type* with the

    Version and Group as an argument.

    For more query options see [Queries and Options](queries_and_options.md).
  ja: >-
    `kubectl get` コマンドはクラスタからリソースを読み込み、フォーマットして出力します。この章の例では、リソースを検索するためにコマンドの引数に**リソースタイプ**をバージョンとグループ名付きで与えます。検索オプションの詳細は[クエリとオプション](queries_and_options.md)をご覧ください。
---
texts:
  en: Kubectl can format and print specific fields from Resources using Json Path.
  ja: リソースから特定のフィールドをフォーマットして表示するには JSON パスを使うことができます。
---
texts:
  en: >-
    {% panel style="warning", title="Scripting Pitfalls" %}

    By default, if no API group or version is specified, kubectl will use the group and version preferred by

    the apiserver.
  ja: >-
    {% panel style="warning", title="スクリプトの落とし穴" %}

    デフォルトでは、API グループやバージョンを指定しなければ、apiserver が選んだグループとバージョンが使用されます。
---
texts:
  en: >-
    Because the **Resource structure may change between API groups and Versions**, users *should* specify the

    API Group and Version when emitting fields from `kubectl get` to make sure the command does not break

    in future releases.
  ja: >-
    **リソースの構造は API グループとバージョンによって変わる可能性があるため**、`kubectl get` からフィールドを出力するときには将来のリリースでコマンドが壊れないことを保証するために、API グループとバージョンを指定することを**推奨します**。
---
texts:
  en: >-
    Failure to do this may result in the different API group / version being used after a cluster upgrade, and

    this group / version may have changed the representation of fields.
  ja: これを省略すると、異なる API グループ / バージョンがクラスタのアップグレード後に使われ、その API グループ / バージョンがフィールドの表現を変更してしまうかもしれません。
---
texts:
  en: JSON Path
  ja: JSON パス
---
texts:
  en: Print the fields from the JSON Path
  ja: JSON パスからフィールドを表示します。
---
texts:
  en: "**Note:**  JSON Path can also be read from a file using `-o custom-columns-file`."
  ja: "**注意:** JSON パスはファイルから読み込むこともでき、そのためには `-o custom-columns-file` を使用します。"
---
texts:
  en: "JSON Path template is composed of JSONPath expressions enclosed by {}. In addition to the original JSONPath syntax, several capabilities are added:"
  ja: JSON パステンプレートは {} で囲まれた JSONPath 記法で構成されます。もともとの JSONPath 構文に加えて、いつくかの拡張が追加されています。
---
texts:
  en: The `$` operator is optional (the expression starts from the root object by default).
  ja: "`$` 演算子はオプショナルです (デフォルトではルートオブジェクトから式が始まります)"
---
texts:
  en: Use "" to quote text inside JSONPath expressions.
  ja: 'JSONPath 式の中ではテキストの引用符に "" を使います'
---
texts:
  en: Use range operator to iterate lists.
  ja: リストをイテレートするには range 演算子を使います
---
texts:
  en: Use negative slice indices to step backwards through a list. Negative indices do not “wrap around” a list. They are valid as long as -index + listLength >= 0.
  ja: スライスのインデックスの負数を使うとリストを後ろから逆方向に進みます。負のインデックスはリストを「包み込み」ません。負のインデックスが有効な範囲は -index + listLength >= 0 です。
---
texts:
  en: JSON Path Symbols Table
  ja: JSON パスの記号一覧
---
texts:
  en: Function
  ja: 機能
---
texts:
  en: Description
  ja: 説明
---
texts:
  en: Example
  ja: 例
---
texts:
  en: Result
  ja: 結果
---
texts:
  en: text
  ja: __COPY__
---
texts:
  en: the plain text
  ja: プレーンテキスト
---
texts:
  en: kind is {.kind}
  ja: 種類は {.kind}
---
texts:
  en: kind is List
  ja: 種類は List
---
texts:
  en: "@"
  ja: __COPY__
---
texts:
  en: the current object
  ja: 現在のオブジェクト
---
texts:
  en: "{@}"
  ja: __COPY__
---
texts:
  en: the same as input
  ja: 入力と同じ
---
texts:
  en: . or []
  ja: __COPY__
---
texts:
  en: child operator
  ja: 子演算子
---
texts:
  en: "{.kind} or {[‘kind’]}"
  ja: __COPY__
---
texts:
  en: List
  ja: __COPY__
---
texts:
  en: ..
  ja: __COPY__
---
texts:
  en: recursive descent
  ja: 再帰的降下
---
texts:
  en: "{..name}"
  ja: __COPY__
---
texts:
  en: 127.0.0.1 127.0.0.2 myself e2e
  ja: __COPY__
---
texts:
  en: "*"
  ja: __COPY__
---
texts:
  en: wildcard. Get all objects
  ja: ワイルドカード。全オブジェクトを取得
---
texts:
  en: "{.items[*].metadata.name}"
  ja: __COPY__
---
texts:
  en: "[127.0.0.1 127.0.0.2]"
  ja: __COPY__
---
texts:
  en: "[start:end :step]"
  ja: __COPY__
---
texts:
  en: subscript operator
  ja: __COPY__
---
texts:
  en: "{.users[0].name}"
  ja: __COPY__
---
texts:
  en: myself
  ja: __COPY__
---
texts:
  en: "[,]"
  ja: __COPY__
---
texts:
  en: union operator
  ja: ユニオン演算子
---
texts:
  en: "{.items[*][‘metadata.name’, ‘status.capacity’]}"
  ja: __COPY__
---
texts:
  en: 127.0.0.1 127.0.0.2 map[cpu:4] map[cpu:8]
  ja: __COPY__
---
texts:
  en: ?()
  ja: __COPY__
---
texts:
  en: filter
  ja: フィルター
---
texts:
  en: "{.users[?(@.name==“e2e”)].user.password}"
  ja: __COPY__
---
texts:
  en: secret
  ja: __COPY__
---
texts:
  en: range, end
  ja: __COPY__
---
texts:
  en: iterate list
  ja: リストのイテレート
---
texts:
  en: "{range .items[*]}[{.metadata.name}, {.status.capacity}] {end}"
  ja: __COPY__
---
texts:
  en: "[127.0.0.1, map[cpu:4]] [127.0.0.2, map[cpu:8]]"
  ja: __COPY__
---
texts:
  en: “
  ja: __COPY__
---
texts:
  en: quote interpreted string
  ja: __COPY__
---
texts:
  en: "{range .items[*]}{.metadata.name}{’\\t’} {end}"
  ja: __COPY__
---
texts:
  en: 127.0.0.1 127.0.0.2
  ja: __COPY__
---
texts:
  en: Print the JSON representation of the first Deployment in the list on a single line.
  ja: リスト中の最初の Deployment を一行の JSON 表現で表示します。
---
texts:
  en: Print the `metadata.name` field for the first Deployment in the list.
  ja: "リスト中の 最初の Deployment の `metadata.name` フィールドを表示します。"
---
texts:
  en: For each Deployment, print its `metadata.name` field and a newline afterward.
  ja: 各 Deployment ごとに、その `metadata.name` フィールドを改行区切りで表示します。
---
texts:
  en: For each Deployment, print its `metadata.name` and `.status.availableReplicas`.
  ja: 各 Deployment ごとに、その `metadata.name` と `.status.availableReplicas` を表示します。
---
texts:
  en: Print the list of Deployments as single line.
  ja: Deployment のリストを一行で表示します。
---
texts:
  en: Print each Deployment on a new line.
  ja: 各 Deployment を改行区切りで表示します。
---
texts:
  en: >-
    {% panel style="info", title="Literal Syntax" %}

    On Windows, you must double quote any JSONPath template that contains spaces (not single quote as shown above for bash).

    This in turn means that you must use a single quote or escaped double quote around any literals in the template.
  ja: >-
    {% panel style="info", title="リテラルの構文" %}

    リテラル構文では、スペースを含む JSONPath テンプレートは (上の bash で示したシングルクォートではなく) ダブルクォートで囲います。

    これは、テンプレート内のリテラルを囲む引用符にはシングルクォートを使うか、エスケープしたダブルクォートを使う必要があることを意味します。
---
texts:
  en: "For example:"
  ja: "例:"
